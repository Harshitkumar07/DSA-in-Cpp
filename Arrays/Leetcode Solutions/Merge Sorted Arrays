** Leetcode Problem 88:- **


** Code :- **

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1, j = n - 1, k = m + n - 1;
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i];
                i--;
                k--;
            } else {
                nums1[k] = nums2[j];
                j--;
                k--;
            }
        }
        while (j >= 0) {
            nums1[k] = nums2[j];
            j--;
            k--;
        }
    }
};

** Time Complexity: **
The time complexity is O(m+n), where m is the number of elements initially in nums1, and n is the number of elements in nums2.
The function iterates through both nums1 and nums2 from the end, placing elements in the correct order in nums1.
Each comparison and assignment takes constant time, so the combined complexity of the two while loops is O(m+n).

** Space Complexity: **
The space complexity is O(1) because the function merges the arrays in place within nums1. No additional data structures are created, so the extra space usage remains constant.
