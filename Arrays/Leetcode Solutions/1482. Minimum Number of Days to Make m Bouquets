 ** Code :- **

class Solution {
public:
    bool isPossible(vector<int>& bloomDay, int m, int k, int maxDays) {
        int bouquets = 0, flowers = 0;
        for (int day : bloomDay) {
            if (day <= maxDays) {
                flowers++;
                if (flowers == k) {
                    bouquets++;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        return bouquets >= m;
    }
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n = bloomDay.size();
        if (m <= 0 || k <= 0 || n == 0) {
            return -1;
        }
        int maxVal = 0;
        for (int day : bloomDay) {
            maxVal = max(maxVal, day);
        }
        int st = 0, end = maxVal, ans = -1;
        while (st <= end) {
            int mid = st + (end - st) / 2;
            if (isPossible(bloomDay, m, k, mid)) {
                ans = mid;
                end = mid - 1;
            } else {
                st = mid + 1;
            }
        }
        return ans;
    }
};

**Time Complexity: **
O(nlogD), where n is the length of bloomDay and D is the range of days from 0 to maxVal (the maximum day in bloomDay).
The binary search on days has a complexity of O(logD), and in each iteration, it calls isPossible, which takes O(n).

** Space Complexity: **
O(1) since only a fixed number of extra variables are used.
