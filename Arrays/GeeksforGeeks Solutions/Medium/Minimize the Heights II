** Code :- **

class Solution {
  public:
    int getMinDiff(vector<int> &arr, int k) {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        int ans = arr[n - 1] - arr[0];
        for (int i = 1; i < n; i++) {
            if (arr[i] - k < 0) {
                continue;
            }
            int minH = min(arr[0] + k, arr[i] - k);
            int maxH = max(arr[i - 1] + k, arr[n - 1] - k);
            ans = min(ans, maxH - minH);
        }
        return ans;
    }
};

** Time Complexity :- **

Sorting the Array:
Sorting the input array of size n takes O(nlogn).

Iterating through the Array:
A single loop iterates through the array from the second element to the last element (nâˆ’1 iterations).
Time complexity: O(n).
Overall Time Complexity: O(nlogn)+O(n)=O(nlogn)

** Space Complexity :- **

The algorithm uses only a constant amount of extra space for variables such as minH, maxH, and ans.
The sorting operation modifies the array in-place, so no additional space is used.
Overall Space Complexity: O(1)
